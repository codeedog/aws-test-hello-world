# Copied from: https://github.com/john-tipper/johntipper.org/blob/master/.github/workflows/build.yml
#

name: Deploy Lambda

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '14.17.0'

#      - name: Cache Node.js modules
#        uses: actions/cache@v2
#        with:
#          path: ~/.npm
#          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
##          key: ${{ runner.OS }}-node-${{ hashFiles('package-lock.json') }}
#          restore-keys: |
#            ${{ runner.OS }}-node-
#            ${{ runner.OS }}-

#      - name: Install CDK
#        run: |
#          shopt -s expand_aliases
#          alias cdk=./node_modules/.bin/cdk
#          npm install -g aws-cdk@1.107.0
#
#      - name: Set up JDK 1.11
#        uses: actions/setup-java@v1
#        with:
#          java-version: 1.11
#
#      - name: Cache Gradle packages
#        uses: actions/cache@v2
#        with:
#          path: ~/.gradle/caches
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
#          restore-keys: ${{ runner.os }}-gradle
#
#
#      - name: Build with Gradle
#        run: ./gradlew build
#
#      - name: Build Gatsby
#        run: |
#          pushd web
#          npm ci
#          gatsby clean
#          gatsby build
#          popd

# For monorepo, this could drop into subdirectory to build the lambda + layer(s)
      - name: Build Lambda et al
        run: |
          npm ci

      - name: Synth CDK
#        run: |
#          ./gradlew cdkPrepare
#          cdk synth \
#          --app 'java -jar ./infrastructure/build/cdk/infrastructure-all.jar -apiLambdaPath ./infrastructure/build/cdk/api-lambdas.zip -lambdaEdge ./infrastructure/build/cdk/lambdaEdge -domainName johntipper.org -region ${{ secrets.AWS_REGION }} -targetAccount ${{ secrets.AWS_TARGET_ACCOUNT }}' \
#          --output build/cdk.out
        run: |
          ./node_modules/.bin/cdk --version
          ./node_modules/.bin/cdk synth --output ./dist/lambda/cdk.out
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Deploy CDK
        run: |
          ./node_modules/.bin/cdk deploy --app ./dist/lambda/cdk.out --require-approval never "*"
        if: github.ref == 'refs/heads/main'
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

#      - name: Publish web assets
#        run: |
#          aws s3 sync --delete --exact-timestamps ./web/public/ s3://website-502171377804
#        if: github.ref == 'refs/heads/master'
#        env:
#          AWS_REGION: ${{ secrets.AWS_REGION }}
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#
#      - name: Invalidate CloudFront
#        run: |
#          DISTRIBUTION_ID=$(aws cloudfront list-distributions --output text --query 'DistributionList.Items[?contains(Aliases.Items, `johntipper.org`)]|[0].Id')
#          aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths '/*'
#        if: github.ref == 'refs/heads/master'
#        env:
#          AWS_REGION: ${{ secrets.AWS_REGION }}
#          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#
